const Counter = require('../models/Counter'); // ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á import Counter Model

/**
 * @description ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á Collection ‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Atomic Operation)
 * @param {string} collectionName - ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Collection ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö (‡πÄ‡∏ä‡πà‡∏ô 'user')
 * @returns {number} ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3)
 */
exports.getNextSequenceValue = async (collectionName) => {
    // üîë Tech Stack: ‡πÉ‡∏ä‡πâ findOneAndUpdate ‡πÅ‡∏•‡∏∞ $inc
    const counter = await Counter.findOneAndUpdate(
        { _id: collectionName }, // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Counter ‡∏Ç‡∏≠‡∏á User Collection
        { $inc: { sequence_value: 1 } }, // 2. Atomic Operation: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ sequence_value ‡∏Ç‡∏∂‡πâ‡∏ô 1
        { new: true, upsert: true } // 3. new: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß, upsert: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Document ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    );

    // üí° Return: ‡∏™‡πà‡∏á‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return counter.sequence_value;
};
