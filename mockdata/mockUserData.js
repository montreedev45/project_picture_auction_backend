
// // Get all users
// exports.getAllUsersFromDB = async () => {
//     await new Promise(resolve => setTimeout(resolve, 50)); 
//     return initialUsers;
// };

// // Check by email
// exports.findUserByEmail = async (email) => {
//     // üí° Business Logic: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤
//     await new Promise(resolve => setTimeout(resolve, 30)); 
//     return initialUsers.find(u => u.email === email);
// };

// //Check by username
// exports.findUserByUsername = async (username) => {
//     // üí° Business Logic: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤
//     await new Promise(resolve => setTimeout(resolve, 30)); 
//     return initialUsers.find(u => u.username === username);
// };

// // Save new user in initialUsers
// exports.saveNewUser = async ({ username, email, passwordHash, firstname, lastname, phone, address }) => {

//     const newId = getNextUserId(); 
//     //const passwordHash = mockHashPassword(password);
//     const createdAt = new Date().toISOString(); // time stamp date (string)

//     const newUser = {
//         id: newId,
//         username,
//         email,
//         passwordHash,
//         firstname,
//         lastname,
//         phone,
//         address,
//         createdAt,
//     };

//     initialUsers.push(newUser); // add new user in initialUsers

//     return newUser;
// };


// exports.updateUser = async (id, updates) => {
//     // 1. ‡∏´‡∏≤ Index ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Array
//     const userIdNumber = parseInt(id, 10);
//     const userIndex = initialUsers.findIndex(u => u.id === userIdNumber);

//     if (userIndex === -1) {
//         return null; // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
//     }

//     // 2. ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• updates ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
//     // üí° Best Practice: ‡πÉ‡∏ä‡πâ spread operator ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏° Object
//     const updatedUser = {
//         ...initialUsers[userIndex], // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
//         ...updates             // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà Service ‡∏Å‡∏£‡∏≠‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
//     };

//     // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á‡πÉ‡∏ô Mock Array (Persistence Simulation)
//     initialUsers[userIndex] = updatedUser;
    
//     // 4. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏î‡∏¢‡∏ó‡∏≥ Deep Copy ‡∏Å‡πà‡∏≠‡∏ô)
//     return { ...updatedUser }; 
// };


// exports.findUserById = async (id) => {
//     // üí° Simulation: ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ findById() ‡∏Ç‡∏≠‡∏á Mongoose ‡∏´‡∏£‡∏∑‡∏≠ ORM
//     const user = initialUsers.find(u => u.id === id);
//     // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Deep Copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mock ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
//     return user ? { ...user } : null; 
// };

// exports.findUserByField = async (fieldName, value) => {
//     // üí° Simulation: ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ findOne({ [fieldName]: value })
//     const user = initialUsers.find(u => u[fieldName] === value);
//     return user ? { ...user } : null;
// };


// exports.initialUsers = initialUsers; // Export array ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Test/Debug










// exports.createUser = async (userData) => {
//     // üí° Logic: ‡∏™‡∏£‡πâ‡∏≤‡∏á Mongoose Document ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
//     const newUser = new User(userData);
//     await newUser.save();
    
//     // Mongoose ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Object ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ passwordHash (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ select: false)
//     return newUser; 
// };

// exports.findUserForLogin = async (username) => {
//     // üîë CRITICAL TECH STACK: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ .select('+passwordHash')
//     return await User.findOne({ username: username }).select('+passwordHash');
// };
// exports.findUserById = async (id) => {
//     // üí° Logic: Mongoose findById ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á passwordHash
//     return await User.findById(id); 
// };
// exports.findUserByField = async (fieldName, value) => {
//     // üí° Logic: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Dynamic Field Name
//     return await User.findOne({ [fieldName]: value });
// };

// exports.updateUser = async (id, updates) => {
//     // üí° Tech Stack: ‡πÉ‡∏ä‡πâ findByIdAndUpdate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Document ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
//     const updatedUser = await User.findByIdAndUpdate(
//         id,
//         { $set: updates }, // $set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
//         { new: true, runValidators: true } // new: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Document ‡πÉ‡∏´‡∏°‡πà
//     );

//     return updatedUser;
// };