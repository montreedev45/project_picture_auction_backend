// import function ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å mockUserData file
const { getAllUsersFromDB, findUserByEmail, saveNewUser, findUserByUsername, findUserByField, updateUser } = require('../mockdata/mockUserData') 
const bcrypt = require('bcrypt');
const saltRounds = 5; // ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏¢‡∏¥‡πà‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏ï‡πà‡∏¢‡∏¥‡πà‡∏á‡∏ä‡πâ‡∏≤

async function hashPasswordAndSave(plainTextPassword) {
    // 1. Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const passwordHash = await bcrypt.hash(plainTextPassword, saltRounds);

    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 'passwordHash' ‡∏•‡∏á‡πÉ‡∏ô Database 
    // ... repository.createUser(email, passwordHash, ...);
    
    return passwordHash;
}


// compare ( Input password === Hash password ) 
const mockComparePassword = (inputPassword, hashedPassword) => {
    const expectedHash = `Hashed_${inputPassword}_ABC`;
    return expectedHash === hashedPassword;
};

// Gen token
const mockGenerateToken = (userId) => `MOCK_JWT_TOKEN_${userId}_${Date.now()}`;

// Get all users
exports.getUsers = async () => {

    const rawUsers = await getAllUsersFromDB(); 

    const processedUsers = rawUsers.map(user => {
        
        return {
            id: user.id,
            username: user.username,
            password: user.password,
            firstname: user.firstname,
            lastname: user.lastname,
            email: user.email,
            phone: user.phone,
            address: user.address
        };
    });

    return processedUsers;
};

//Get user by id
exports.getUserById = async (UserId) => {

    const rawUsers = await getAllUsersFromDB(); 

    const user = rawUsers.find(p => p.id === parseInt(UserId));

    if (!user) {
        // üõë Best Practice: ‡πÇ‡∏¢‡∏ô Error ‡∏ó‡∏µ‡πà‡∏°‡∏µ Status Code ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        const error = new Error(`User with ID ${UserId} not found.`);
        error.statusCode = 404; // HTTP Not Found
        throw error;
    }

    const processedUser = {
        id: user.id,
        username: user.username,
        password: user.password,
        firstname: user.firstname,
        lastname: user.lastname,
        email: user.email,
        phone: user.phone,
        address: user.address
    };
    return processedUser;

};

// Register
exports.registerUser = async (username, email, password, firstname, lastname, phone, address) => {
    
    //check input
    if (!username || !email || !password || password.length < 6 || !firstname || !lastname || !phone || !address) {
        const error = new Error('Username, valid email, password (min 6 chars), Firstname, Lastname, Phone, and Address are required.');
        error.statusCode = 400;
        throw error;
    }
    
    //check conflict email
    const existingUser = await findUserByEmail(email);
    if (existingUser) {
        const error = new Error('This email is already registered.');
        error.statusCode = 409; // HTTP Conflict
        throw error;
    }

    const newpasswordHash = await hashPasswordAndSave(password)
    console.log('passwordhash : ',newpasswordHash)
    // save new user
    const newUser = await saveNewUser({ username, email, newpasswordHash, firstname, lastname, phone, address });
    //console.log("Password ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Hash ‡πÅ‡∏•‡πâ‡∏ß:", newUser.passwordHash)

    //const { passwordHash, ...userWithoutHash } = newUser;  //‡πÄ‡∏≠‡∏≤ passwordHash ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å  newUser object ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á userWithoutHash object ‡πÉ‡∏´‡∏°‡πà
    return newUser;
};

// Login
exports.loginUser = async (username, password) => {
    
    //check username
    //console.log('password',password)
    const user = await findUserByUsername(username); 
    if (!user) {
        const error = new Error('Invalid credentials.'); // 401 Unauthorized
        error.statusCode = 401; 
        throw error;
    }
    console.log(user.passwordHash)

    // Check: Compare Password
    const isMatch = await bcrypt.compare(password, user.passwordHash);
    //console.log(isMatch)

    if (!isMatch) {
        const error = new Error('Invalid credentials.'); 
        error.statusCode = 401; 
        throw error;
    }

    // 3. Token Generation
    const token = mockGenerateToken(user.id);
    //console.log(`token : `, token)

    // 4. Return (Strip Hash)
    const { passwordHash, ...userWithoutHash } = user;
    
    return {
        token,
        user: userWithoutHash,
    };
};

const allowedUpdates = ['username', 'firstname', 'lastname', 'email', 'phone', 'address'];


exports.updateUserProfile = async(targetUserId, updates) => {
    
    const rawUsers = await getAllUsersFromDB(); 
    const user = rawUsers.find(p => p.id === parseInt(targetUserId));
    console.log(user)
    
    if (!user) {
        console.log(45)
        // üí° Business Logic: ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Controller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Status Code (404)
        throw new Error('User not found.'); 
    }

    // Step 2: Whitelisting - ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    const finalUpdates = {};
    Object.keys(updates).forEach(key => {
        if (allowedUpdates.includes(key) && updates[key] !== undefined) {
            finalUpdates[key] = updates[key];
        } 
    });

    // Step 3: Business Logic - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email ‡∏ã‡πâ‡∏≥
    if (finalUpdates.email && finalUpdates.email !== user.email) {
        const existingUser = await findUserByField('email', finalUpdates.email);
        
        // üí° Logic: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô (id ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô) ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if (existingUser && existingUser.id !== targetUserId) { 
            // ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Controller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Status Code (400)
            throw new Error('This email is already in use by another user.');
        }
    }
    // üîë Step 4: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Persistence (‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Mock File)
    const updatedUser = await updateUser(targetUserId, finalUpdates);
    console.log(updatedUser)
    // Step 5: Business Logic - ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
    if (updatedUser) {
        updatedUser.password = undefined; 
    }

    // ‚úÖ Return ‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô Business Logic ‡πÅ‡∏•‡∏∞ Persistence ‡πÅ‡∏•‡πâ‡∏ß
    return updatedUser;
};