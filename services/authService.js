const bcrypt = require("bcrypt");
const crypto = require('crypto');
const saltRounds = 5; // ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏¢‡∏¥‡πà‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏ï‡πà‡∏¢‡∏¥‡πà‡∏á‡∏ä‡πâ‡∏≤
const User = require("../models/User");
const { sendEmail } = require("../utils/email");
const { getNextSequenceValue } = require("../utils/idGenerator");
const { generateAuthToken } = require("../utils/tokenHelper");


async function hashPasswordAndSave(plainTextPassword) {
  if (
    !plainTextPassword ||
    typeof plainTextPassword !== "string" ||
    plainTextPassword.length === 0
  ) {
    throw new Error("Invalid or empty password provided for hashing.");
  }
  const passwordHash = await bcrypt.hash(plainTextPassword, saltRounds);

  return passwordHash;
}


// Get all users
exports.getUsers = async () => {
  return await User.find();
};


//Get user by id
exports.getUserById = async (UserId) => {
  const queryId = Number(UserId); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numbef

  const user = await User.findOne({ acc_id: queryId });

  if (!user) {
    const error = new Error(`User with ID ${UserId} not found.`);
    error.statusCode = 404;
    throw error;
  }

  return user;
};


// Register
exports.registerUser = async (
  username,
  email,
  password,
  firstname,
  lastname,
  phone,
  address,
  acc_coin = 10000 //‡∏Å‡∏≥‡∏´‡∏ô‡∏î default
) => {
  const passwordHash = await hashPasswordAndSave(password); //hash password

  const newAccId = await getNextSequenceValue("user"); //‡∏™‡∏£‡πâ‡∏≤‡∏á acc_id ‡πÉ‡∏´‡∏°‡πà

  const newUser = await saveNewUser({
    acc_id: newAccId,
    username: username.trim(),
    email: email.trim(),
    passwordHash,
    firstname: firstname.trim(),
    lastname: lastname.trim(),
    phone: phone.trim(),
    address: address.trim(),
    acc_coin,
  });
  return newUser;
};

const saveNewUser = async (userData) => {
  // üí° Tech Stack: ‡πÉ‡∏ä‡πâ Mongoose Model ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Document ‡πÉ‡∏´‡∏°‡πà
  const newUser = new User({
    acc_id: userData.acc_id,
    acc_username: userData.username,
    acc_email: userData.email,
    acc_password: userData.passwordHash,
    acc_firstname: userData.firstname,
    acc_lastname: userData.lastname,
    acc_phone: userData.phone,
    acc_address: userData.address,
    acc_coin: userData.acc_coin,
  });

  await newUser.save(); //save data in mongoose
  return newUser;
};


// Login
exports.loginUser = async (username, password) => {
  // üîë Tech Stack: ‡πÉ‡∏ä‡πâ .select('+acc_password') ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
  const user = await User.findOne({ acc_username: username }).select(
    //check username
    "+acc_password"
  );

  if (!user) {
    const error = new Error("Invalid credentials.");
    error.statusCode = 401;
    throw error;
  }

  let userRespon = user.toJSON(); //‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô json ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ meta data ‡∏≠‡∏≠‡∏Å

  delete userRespon.__v;
  delete userRespon.acc_password;
  delete userRespon._id;
  delete userRespon.createdAt;
  delete userRespon.updatedAt;

  // Check: Compare Password
  const isMatch = await bcrypt.compare(password, user.acc_password);

  if (!isMatch) {
    const error = new Error("Invalid credentials.");
    error.statusCode = 401;
    throw error;
  }

  // 3. Token Generation
  const token = generateAuthToken(userRespon);

  return {
    token,
    user: userRespon,
  };
};


// üí° Business Logic: Field ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Schema)
const allowedUpdates = [
  "acc_username",
  "acc_firstname",
  "acc_lastname",
  "acc_email",
  "acc_phone",
  "acc_address",
];


// update
exports.updateUserProfile = async (targetUserId, updates) => {
  const finalUpdates = {};
  const updateKeys = Object.keys(updates); //‡∏î‡∏∂‡∏á key from object  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô array

  //  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ Trim ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô String ‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  updateKeys.forEach((key) => {
    if (allowedUpdates.includes(key) && updates[key] !== undefined) {
      finalUpdates[key] =
        typeof updates[key] === "string" ? updates[key].trim() : updates[key];
    }
  });

  // ‡∏ñ‡πâ‡∏≤ finalUpdates ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å frontend
  if (Object.keys(finalUpdates).length === 0) {
    const error = new Error("No valid fields provided for update.");
    error.statusCode = 400;
    throw error;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email ‡∏ã‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï acc_email)
  const newEmail = finalUpdates.acc_email;

  if (newEmail) {
    const existingUserWithEmail = await User.findOne({ acc_email: newEmail });

    // Logic: ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞ _id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏û‡∏ö ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö _id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    if (
      existingUserWithEmail &&
      existingUserWithEmail._id.toString() !== targetUserId.toString()
    ) {
      const error = new Error("This email is already in use by another user.");
      error.statusCode = 409;
      throw error;
    }
  }

  const queryAccId = Number(targetUserId); //‡πÅ‡∏õ‡∏•‡∏á id ‡πÄ‡∏õ‡πá‡∏ô number

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á Document ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  //‡πÉ‡∏ä‡πâ findOne ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÉ‡∏ä‡πâ id ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
  const updatedUser = await User.findOneAndUpdate(
    { acc_id: queryAccId },
    finalUpdates,
    {
      new: true, //  ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Document ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
      runValidators: true, // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ Validator ‡πÉ‡∏ô Schema ‡πÄ‡∏ä‡πà‡∏ô required, unique
    }
  ).select("-acc_password"); // Security: ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô

  if (!updatedUser) {
    const error = new Error(`User with ID ${targetUserId} not found.`);
    error.statusCode = 404;
    throw error;
  }

  return updatedUser;
};


// update password
exports.updatePassword = async (userId, currentPassword, newPassword) => {
  // 1. SECURITY: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ User ‡πÅ‡∏•‡∏∞ "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö" ‡∏î‡∏∂‡∏á acc_password ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ (select: false)
  const user = await User.findOne({ acc_id: userId }).select("+acc_password"); 

  // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö User Not Found (404)
  if (!user) {
    // üí° Security Best Practice: ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ User ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Login/Update
    const error = new Error("Invalid credentials or user identity.");
    error.statusCode = 401;
    throw error;
  }

  // 3. SECURITY: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Old Password Check)
  const isMatch = await bcrypt.compare(currentPassword, user.acc_password);

  if (!isMatch) {
    const error = new Error(`The current password you entered is incorrect.`);
    error.statusCode = 401;
    throw error;
  }

  // 4. SECURITY: HASH ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  const newPasswordHash = await bcrypt.hash(newPassword, 5);

  // 5. Mongoose Persistence: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  const updatePassword = await User.findOneAndUpdate(
    { acc_id: userId },
    { acc_password: newPasswordHash },
    {
      new: true,
      runValidators: true, // üí° ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Mongoose ‡∏£‡∏±‡∏ô validation ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    }
  ).select("-acc_password"); // üí° Security: ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô Response

  return updatePassword;
};


// forgot password
exports.forgotPassword = async (email) => {
  const user = await User.findOne({ acc_email: email });

  if (!user) {
    console.log(`Attempted password reset for unregistered email: ${email}`);
    return {
      message:
        "If the email is registered, you will receive a password reset link.",
    };
  }

  
  // --- 3. 4. 5. Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ---

  // 3. SECURITY: ‡∏™‡∏£‡πâ‡∏≤‡∏á Token, Hash, ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÉ‡∏ä‡πâ Instance Method)
  const resetTokenPlainText = user.getResetPasswordToken();

  // 4. Persistence: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Hash Token ‡πÅ‡∏•‡∏∞ Expiry ‡∏•‡∏á‡πÉ‡∏ô DB
  await user.save({ validateBeforeSave: false });

  // 5. Business Logic: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  const resetURL = `${process.env.FRONTEND_URL}/reset-password/${resetTokenPlainText}`;
  const message = `
        <h1>Password Reset Request</h1>
        <p>You are receiving this because you (or someone else) has requested the reset of the password for your account.</p>
        <p>Please click on this link to complete the process: 
        <a href="${resetURL}">Click here to reset your password</a></p>
        <p>This link is valid for 20 minutes.</p>
        <p>If you did not request this, please ignore this email.</p>
    `;

  try {
    // 6. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    await sendEmail({
      email: user.acc_email,
      subject: "Password Reset Token (Valid for 20 minutes)",
      message: message,
    });

    // 7. FINAL RETURN: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return {
      message: "Password reset link sent to your email.",
    };
  } catch (error) {
    // 8. FAILURE LOGIC: ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏•‡∏ö Token ‡πÅ‡∏•‡∏∞‡πÇ‡∏¢‡∏ô Error
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;
    await user.save({ validateBeforeSave: false }); // ‡∏•‡∏ö Token ‡∏≠‡∏≠‡∏Å

    console.error("Email sending failed:", error);
    throw new Error(
      "There was an error sending the reset email. Please try again later."
    );
  }
};


// reset password
exports.resetPassword = async (token, newPassword) => {
    
    // 1. SECURITY: Hash Token ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å Client
    const hashedToken = crypto
        .createHash('sha256')
        .update(token)
        .digest('hex');

    // 2. VALIDATION: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ User ‡∏î‡πâ‡∏ß‡∏¢ Token Hash ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const user = await User.findOne({ 
        resetPasswordToken: hashedToken, 
        resetPasswordExpire: { $gt: Date.now() } // ‚¨Ö‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    }).select('+acc_password'); // ‡∏î‡∏∂‡∏á Password Hash ‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠ Hashing Check
    
    // 3. ERROR HANDLING: Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (!user) {
        const error = new Error('Password reset token is invalid or has expired.');
        error.statusCode = 400;
        throw error;
    }
    
    // 4. HASHING: Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    const newPasswordHash = await bcrypt.hash(newPassword, 5);
    
    // 5. PERSISTENCE: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á Token
    user.acc_password = newPasswordHash;
    
    // ‡∏•‡πâ‡∏≤‡∏á Token ‡πÅ‡∏•‡∏∞ Expiry ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ (Token Replay Attack)
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;
    
    // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await user.save(); 
    
    // 7. üí° Best Practice: ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á JWT ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (Optional)
    // const jwtToken = user.getSignedJwtToken(); 
    
    return { 
        message: 'Your password has been successfully reset.',
        // token: jwtToken // (Optional)
    };
};